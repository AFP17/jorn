---
description: 
globs: 
alwaysApply: false
---
# Responsivity Guidelines

When developing responsive layouts, keep these points in mind:

- Design for mobile-first.
- Use relative units (e.g., %, em, rem) for sizing and spacing.
- Test on multiple screen sizes and devices.
- Utilize CSS media queries to adapt layouts.
- Optimize images for different resolutions.

## Iterating and Improving Responsivity

Continuously enhancing the responsiveness of your application is key. Consider these practices:

- **Regular Cross-Device Testing**: Beyond initial testing, regularly check layouts on new devices and browser versions as they become popular. Emulators are good, but real devices often reveal unique issues.
- **Performance on Lower-End Devices**: Pay special attention to performance on less powerful mobile devices. Complex responsive logic or large assets can disproportionately affect these users.
- **Refine Breakpoints**: As content or design evolves, review and adjust your CSS media query breakpoints. Are they still optimal? Could some be consolidated or new ones needed for specific layout shifts?
- **Touch Target Review**: Periodically re-evaluate touch target sizes and spacing on touch-enabled devices, especially for interactive elements that might be too close together or too small.
- **Viewport Unit Exploration**: Revisit the use of viewport units (vw, vh, vmin, vmax) for typography and spacing where appropriate, as they can offer more fluid scaling than traditional relative units in some cases.
- **User Feedback on Different Devices**: If you gather user feedback, try to segment it by device category (desktop, tablet, mobile) to identify platform-specific responsivity issues.
- **Accessibility for Responsive States**: Ensure that all interactive elements are keyboard accessible and ARIA attributes are correctly managed across different responsive states. What works on desktop must also work on mobile from an accessibility standpoint.
- **Simplify Complex Responsive Logic**: If certain components have overly complex media queries or JavaScript-based responsive adjustments, look for opportunities to simplify them, perhaps by rethinking the layout approach or using modern CSS capabilities like Flexbox or Grid more effectively.
- **Stay Updated on CSS Features**: New CSS features (e.g., container queries, `clamp()`, aspect-ratio) are continually being introduced that can simplify or improve responsive design techniques. Stay informed and consider adopting them where beneficial.


